memberSearchIndex = [{"p":"datamining","c":"AbstractAssociationRuleMiner","l":"AbstractAssociationRuleMiner(BooleanDatabase)","u":"%3Cinit%3E(datamining.BooleanDatabase)"},{"p":"datamining","c":"AbstractItemsetMiner","l":"AbstractItemsetMiner(BooleanDatabase)","u":"%3Cinit%3E(datamining.BooleanDatabase)"},{"p":"solvers","c":"AbstractSolver","l":"AbstractSolver(Set<Variable>, Set<Constraint>)","u":"%3Cinit%3E(java.util.Set,java.util.Set)"},{"p":"solvers","c":"ArcConsistency","l":"ac1(Map<Variable, Set<Object>>)","u":"ac1(java.util.Map)"},{"p":"planning","c":"AStarPlanner","l":"actions"},{"p":"planning","c":"BFSPlanner","l":"actions"},{"p":"planning","c":"DFSPlanner","l":"actions"},{"p":"planning","c":"DijkstraPlanner","l":"actions"},{"p":"datamining","c":"Database","l":"add(Map<Variable, Object>)","u":"add(java.util.Map)"},{"p":"datamining","c":"BooleanDatabase","l":"add(Set<BooleanVariable>)","u":"add(java.util.Set)"},{"p":"representation","c":"BinaryExtensionConstraint","l":"addTuple(Object, Object)","u":"addTuple(java.lang.Object,java.lang.Object)"},{"p":"datamining","c":"BruteForceAssociationRuleMiner","l":"allCandidatePremises(Set<BooleanVariable>)","u":"allCandidatePremises(java.util.Set)"},{"p":"datamining","c":"Apriori","l":"allSubsetsFrequent(Set<BooleanVariable>, Collection<SortedSet<BooleanVariable>>)","u":"allSubsetsFrequent(java.util.Set,java.util.Collection)"},{"p":"datamining","c":"Apriori","l":"Apriori(BooleanDatabase)","u":"%3Cinit%3E(datamining.BooleanDatabase)"},{"p":"solvers","c":"ArcConsistency","l":"ArcConsistency(Set<Constraint>)","u":"%3Cinit%3E(java.util.Set)"},{"p":"datamining","c":"AssociationRule","l":"AssociationRule(Set<BooleanVariable>, Set<BooleanVariable>, float, float)","u":"%3Cinit%3E(java.util.Set,java.util.Set,float,float)"},{"p":"planning","c":"AStarPlanner","l":"aStar(Map<Map<Variable, Object>, Action>, Map<Map<Variable, Object>, Map<Variable, Object>>, Map<Map<Variable, Object>, Integer>, Map<Map<Variable, Object>, Float>)","u":"aStar(java.util.Map,java.util.Map,java.util.Map,java.util.Map)"},{"p":"planning","c":"AStarPlanner","l":"AStarPlanner(Map<Variable, Object>, Set<Action>, Goal, Heuristic)","u":"%3Cinit%3E(java.util.Map,java.util.Set,planning.Goal,planning.Heuristic)"},{"p":"exemples","c":"HouseSolvers","l":"backTrackSolve()"},{"p":"solvers","c":"BacktrackSolver","l":"BacktrackSolver(Set<Variable>, Set<Constraint>)","u":"%3Cinit%3E(java.util.Set,java.util.Set)"},{"p":"exemples","c":"HouseRepresentation","l":"BAS"},{"p":"datamining","c":"AbstractItemsetMiner","l":"base"},{"p":"datamining","c":"BruteForceAssociationRuleMiner","l":"base"},{"p":"planning","c":"BasicAction","l":"BasicAction(Map<Variable, Object>, Map<Variable, Object>, int)","u":"%3Cinit%3E(java.util.Map,java.util.Map,int)"},{"p":"planning","c":"BasicGoal","l":"BasicGoal(Map<Variable, Object>)","u":"%3Cinit%3E(java.util.Map)"},{"p":"solvers","c":"DomainSizeVariableHeuristic","l":"best(Set<Variable>, Map<Variable, Set<Object>>)","u":"best(java.util.Set,java.util.Map)"},{"p":"solvers","c":"NbConstraintsVariableHeuristic","l":"best(Set<Variable>, Map<Variable, Set<Object>>)","u":"best(java.util.Set,java.util.Map)"},{"p":"solvers","c":"VariableHeuristic","l":"best(Set<Variable>, Map<Variable, Set<Object>>)","u":"best(java.util.Set,java.util.Map)"},{"p":"planning","c":"BFSPlanner","l":"bfs(Map<Map<Variable, Object>, Map<Variable, Object>>, Map<Map<Variable, Object>, Action>)","u":"bfs(java.util.Map,java.util.Map)"},{"p":"planning","c":"BFSPlanner","l":"BFSPlanner(Map<Variable, Object>, Set<Action>, Goal)","u":"%3Cinit%3E(java.util.Map,java.util.Set,planning.Goal)"},{"p":"representation","c":"BinaryExtensionConstraint","l":"BinaryExtensionConstraint(Variable, Variable)","u":"%3Cinit%3E(representation.Variable,representation.Variable)"},{"p":"representation","c":"BinaryTuple","l":"BinaryTuple(Object, Object)","u":"%3Cinit%3E(java.lang.Object,java.lang.Object)"},{"p":"datamining","c":"BooleanDatabase","l":"BooleanDatabase(Set<BooleanVariable>)","u":"%3Cinit%3E(java.util.Set)"},{"p":"representation","c":"BooleanVariable","l":"BooleanVariable(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"datamining","c":"BruteForceAssociationRuleMiner","l":"BruteForceAssociationRuleMiner(BooleanDatabase)","u":"%3Cinit%3E(datamining.BooleanDatabase)"},{"p":"datamining","c":"Apriori","l":"combine(SortedSet<BooleanVariable>, SortedSet<BooleanVariable>)","u":"combine(java.util.SortedSet,java.util.SortedSet)"},{"p":"datamining","c":"AbstractItemsetMiner","l":"COMPARATOR"},{"p":"datamining","c":"AbstractAssociationRuleMiner","l":"confidence(Set<BooleanVariable>, Set<BooleanVariable>, Set<Itemset>)","u":"confidence(java.util.Set,java.util.Set,java.util.Set)"},{"p":"solvers","c":"AbstractSolver","l":"cons"},{"p":"solvers","c":"BacktrackSolver","l":"cons"},{"p":"solvers","c":"ArcConsistency","l":"constraints"},{"p":"exemples","c":"HouseSolvers","l":"contraintes"},{"p":"solvers","c":"NbConstraintsVariableHeuristic","l":"contraintes"},{"p":"planning","c":"BasicAction","l":"cout"},{"p":"exemples","c":"HouseRepresentation","l":"dalleCoulee"},{"p":"datamining","c":"AbstractAssociationRuleMiner","l":"database"},{"p":"datamining","c":"Database","l":"Database(Set<Variable>)","u":"%3Cinit%3E(java.util.Set)"},{"p":"planning","c":"DFSPlanner","l":"DFSPlanner(Map<Variable, Object>, Set<Action>, Goal)","u":"%3Cinit%3E(java.util.Map,java.util.Set,planning.Goal)"},{"p":"planning","c":"DFSPlanner","l":"dfsRec(Map<Variable, Object>, LinkedList<Action>, Set<Map<Variable, Object>>)","u":"dfsRec(java.util.Map,java.util.LinkedList,java.util.Set)"},{"p":"representation","c":"DifferenceConstraint","l":"DifferenceConstraint(Variable, Variable)","u":"%3Cinit%3E(representation.Variable,representation.Variable)"},{"p":"planning","c":"DijkstraPlanner","l":"dijkstra(Map<Map<Variable, Object>, Action>, Map<Map<Variable, Object>, Integer>, Map<Map<Variable, Object>, Map<Variable, Object>>)","u":"dijkstra(java.util.Map,java.util.Map,java.util.Map)"},{"p":"planning","c":"DijkstraPlanner","l":"DijkstraPlanner(Map<Variable, Object>, Set<Action>, Goal)","u":"%3Cinit%3E(java.util.Map,java.util.Set,planning.Goal)"},{"p":"exemples","c":"HouseRepresentation","l":"domaine"},{"p":"solvers","c":"DomainSizeVariableHeuristic","l":"DomainSizeVariableHeuristic(boolean)","u":"%3Cinit%3E(boolean)"},{"p":"exemples","c":"HouseRepresentation","l":"DROITE"},{"p":"planning","c":"BasicAction","l":"effet"},{"p":"solvers","c":"ArcConsistency","l":"enforceNodeConsistency(Map<Variable, Set<Object>>)","u":"enforceNodeConsistency(java.util.Map)"},{"p":"representation","c":"BinaryTuple","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"representation","c":"Variable","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"planning","c":"Heuristic","l":"estimate(Map<Variable, Object>)","u":"estimate(java.util.Map)"},{"p":"datamining","c":"Apriori","l":"extract(float)"},{"p":"datamining","c":"ItemsetMiner","l":"extract(float)"},{"p":"datamining","c":"AssociationRuleMiner","l":"extract(float, float)","u":"extract(float,float)"},{"p":"datamining","c":"BruteForceAssociationRuleMiner","l":"extract(float, float)","u":"extract(float,float)"},{"p":"datamining","c":"Itemset","l":"frequence"},{"p":"datamining","c":"AbstractItemsetMiner","l":"frequency(Set<BooleanVariable>)","u":"frequency(java.util.Set)"},{"p":"datamining","c":"AbstractAssociationRuleMiner","l":"frequency(Set<BooleanVariable>, Set<Itemset>)","u":"frequency(java.util.Set,java.util.Set)"},{"p":"datamining","c":"Apriori","l":"frequentSingletons(float)"},{"p":"exemples","c":"HouseRepresentation","l":"GAUCHE"},{"p":"planning","c":"AStarPlanner","l":"getActions()"},{"p":"planning","c":"BFSPlanner","l":"getActions()"},{"p":"planning","c":"DFSPlanner","l":"getActions()"},{"p":"planning","c":"DijkstraPlanner","l":"getActions()"},{"p":"planning","c":"Planner","l":"getActions()"},{"p":"datamining","c":"AbstractItemsetMiner","l":"getBase()"},{"p":"planning","c":"AStarPlanner","l":"getbfsplan(Map<Map<Variable, Object>, Map<Variable, Object>>, Map<Map<Variable, Object>, Action>, Map<Variable, Object>)","u":"getbfsplan(java.util.Map,java.util.Map,java.util.Map)"},{"p":"planning","c":"BFSPlanner","l":"getbfsplan(Map<Map<Variable, Object>, Map<Variable, Object>>, Map<Map<Variable, Object>, Action>, Map<Variable, Object>)","u":"getbfsplan(java.util.Map,java.util.Map,java.util.Map)"},{"p":"datamining","c":"AssociationRule","l":"getConclusion()"},{"p":"datamining","c":"AssociationRule","l":"getConfidence()"},{"p":"exemples","c":"HouseExample","l":"getConstraints()"},{"p":"exemples","c":"HouseRepresentation","l":"getContrainte()"},{"p":"planning","c":"Action","l":"getCost()"},{"p":"planning","c":"BasicAction","l":"getCost()"},{"p":"exemples","c":"HouseRepresentation","l":"getDalleCoulee()"},{"p":"datamining","c":"AbstractAssociationRuleMiner","l":"getDatabase()"},{"p":"datamining","c":"AssociationRuleMiner","l":"getDatabase()"},{"p":"datamining","c":"Apriori","l":"getDataBase()"},{"p":"datamining","c":"ItemsetMiner","l":"getDataBase()"},{"p":"planning","c":"DijkstraPlanner","l":"getDijkstraPlan(Map<Map<Variable, Object>, Map<Variable, Object>>, Map<Map<Variable, Object>, Action>, Set<Map<Variable, Object>>, Map<Map<Variable, Object>, Integer>)","u":"getDijkstraPlan(java.util.Map,java.util.Map,java.util.Set,java.util.Map)"},{"p":"representation","c":"Variable","l":"getDomain()"},{"p":"exemples","c":"HouseRepresentation","l":"getDomaine()"},{"p":"datamining","c":"AssociationRule","l":"getFrequency()"},{"p":"datamining","c":"Itemset","l":"getFrequency()"},{"p":"planning","c":"AStarPlanner","l":"getGoal()"},{"p":"planning","c":"BFSPlanner","l":"getGoal()"},{"p":"planning","c":"DFSPlanner","l":"getGoal()"},{"p":"planning","c":"DijkstraPlanner","l":"getGoal()"},{"p":"planning","c":"Planner","l":"getGoal()"},{"p":"planning","c":"AStarPlanner","l":"getInitialState()"},{"p":"planning","c":"BFSPlanner","l":"getInitialState()"},{"p":"planning","c":"DFSPlanner","l":"getInitialState()"},{"p":"planning","c":"DijkstraPlanner","l":"getInitialState()"},{"p":"planning","c":"Planner","l":"getInitialState()"},{"p":"datamining","c":"Database","l":"getInstances()"},{"p":"datamining","c":"BooleanDatabase","l":"getItems()"},{"p":"datamining","c":"Itemset","l":"getItems()"},{"p":"exemples","c":"HouseRepresentation","l":"getListeVariable()"},{"p":"exemples","c":"HouseRepresentation","l":"getMurElevee()"},{"p":"representation","c":"Variable","l":"getName()"},{"p":"datamining","c":"AssociationRule","l":"getPremise()"},{"p":"representation","c":"BinaryExtensionConstraint","l":"getScope()"},{"p":"representation","c":"Constraint","l":"getScope()"},{"p":"representation","c":"DifferenceConstraint","l":"getScope()"},{"p":"representation","c":"Implication","l":"getScope()"},{"p":"exemples","c":"HouseRepresentation","l":"getSolHumide()"},{"p":"exemples","c":"HouseRepresentation","l":"getToitureTermine()"},{"p":"datamining","c":"BooleanDatabase","l":"getTransactions()"},{"p":"representation","c":"BinaryTuple","l":"getVal1()"},{"p":"representation","c":"BinaryTuple","l":"getVal2()"},{"p":"datamining","c":"Database","l":"getVariables()"},{"p":"exemples","c":"HouseExample","l":"getVariables()"},{"p":"planning","c":"AStarPlanner","l":"goal"},{"p":"planning","c":"BFSPlanner","l":"goal"},{"p":"planning","c":"DFSPlanner","l":"goal"},{"p":"planning","c":"DijkstraPlanner","l":"goal"},{"p":"exemples","c":"HouseRepresentation","l":"grille"},{"p":"representation","c":"BinaryTuple","l":"hashCode()"},{"p":"representation","c":"Variable","l":"hashCode()"},{"p":"exemples","c":"HouseRepresentation","l":"HAUT"},{"p":"planning","c":"AStarPlanner","l":"heuristic"},{"p":"exemples","c":"HouseSolvers","l":"heuristicAndMacSolve()"},{"p":"solvers","c":"HeuristicMACSolver","l":"HeuristicMACSolver(Set<Variable>, Set<Constraint>, VariableHeuristic, ValueHeuristic)","u":"%3Cinit%3E(java.util.Set,java.util.Set,solvers.VariableHeuristic,solvers.ValueHeuristic)"},{"p":"solvers","c":"HeuristicMACSolver","l":"heuristicVal"},{"p":"solvers","c":"HeuristicMACSolver","l":"heuristicVar"},{"p":"exemples","c":"HouseDataMining","l":"house"},{"p":"exemples","c":"HousePlanification","l":"house"},{"p":"exemples","c":"HouseDataMining","l":"HouseDataMining(HouseRepresentation, Set<Map<Variable, Object>>)","u":"%3Cinit%3E(exemples.HouseRepresentation,java.util.Set)"},{"p":"exemples","c":"HouseDemo","l":"HouseDemo()","u":"%3Cinit%3E()"},{"p":"exemples","c":"HouseExample","l":"HouseExample(int, int, Set<String>, Set<String>)","u":"%3Cinit%3E(int,int,java.util.Set,java.util.Set)"},{"p":"exemples","c":"HousePlanification","l":"HousePlanification(HouseRepresentation, Map<Variable, Object>)","u":"%3Cinit%3E(exemples.HouseRepresentation,java.util.Map)"},{"p":"exemples","c":"HouseRepresentation","l":"HouseRepresentation(int, int, Set<String>, Set<String>)","u":"%3Cinit%3E(int,int,java.util.Set,java.util.Set)"},{"p":"exemples","c":"HouseSolvers","l":"HouseSolvers(Set<Variable>, Set<Constraint>)","u":"%3Cinit%3E(java.util.Set,java.util.Set)"},{"p":"exemples","c":"HouseRepresentation","l":"i"},{"p":"representation","c":"Implication","l":"Implication(BooleanVariable, boolean, BooleanVariable, boolean)","u":"%3Cinit%3E(representation.BooleanVariable,boolean,representation.BooleanVariable,boolean)"},{"p":"planning","c":"AStarPlanner","l":"initialState"},{"p":"planning","c":"BFSPlanner","l":"initialState"},{"p":"planning","c":"DFSPlanner","l":"initialState"},{"p":"planning","c":"DijkstraPlanner","l":"initialState"},{"p":"datamining","c":"Database","l":"instances"},{"p":"planning","c":"BasicGoal","l":"instanciation"},{"p":"planning","c":"Action","l":"isApplicable(Map<Variable, Object>)","u":"isApplicable(java.util.Map)"},{"p":"planning","c":"BasicAction","l":"isApplicable(Map<Variable, Object>)","u":"isApplicable(java.util.Map)"},{"p":"solvers","c":"AbstractSolver","l":"isConsistent(Map<Variable, Object>)","u":"isConsistent(java.util.Map)"},{"p":"planning","c":"BasicGoal","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"planning","c":"Goal","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"representation","c":"BinaryExtensionConstraint","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"representation","c":"Constraint","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"representation","c":"DifferenceConstraint","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"representation","c":"Implication","l":"isSatisfiedBy(Map<Variable, Object>)","u":"isSatisfiedBy(java.util.Map)"},{"p":"datamining","c":"BooleanDatabase","l":"items"},{"p":"datamining","c":"Itemset","l":"items"},{"p":"datamining","c":"Itemset","l":"Itemset(Set<BooleanVariable>, float)","u":"%3Cinit%3E(java.util.Set,float)"},{"p":"datamining","c":"Database","l":"itemTable()"},{"p":"exemples","c":"HouseRepresentation","l":"j"},{"p":"exemples","c":"HouseExample","l":"largeur"},{"p":"solvers","c":"NbConstraintsVariableHeuristic","l":"lePlusDansContrainte"},{"p":"exemples","c":"HousePlanification","l":"listeAction"},{"p":"exemples","c":"HouseRepresentation","l":"listeContrainte"},{"p":"exemples","c":"HouseRepresentation","l":"listeVariable"},{"p":"exemples","c":"HouseExample","l":"longueur"},{"p":"exemples","c":"HouseSolvers","l":"macSolve()"},{"p":"solvers","c":"HeuristicMACSolver","l":"MACSolver(Map<Variable, Object>, LinkedList<Variable>, Map<Variable, Set<Object>>)","u":"MACSolver(java.util.Map,java.util.LinkedList,java.util.Map)"},{"p":"solvers","c":"MACSolver","l":"MACSolver(Map<Variable, Object>, LinkedList<Variable>, Map<Variable, Set<Object>>)","u":"MACSolver(java.util.Map,java.util.LinkedList,java.util.Map)"},{"p":"solvers","c":"MACSolver","l":"MACSolver(Set<Variable>, Set<Constraint>)","u":"%3Cinit%3E(java.util.Set,java.util.Set)"},{"p":"datamining","c":"Test","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"exemples","c":"HouseDemo","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"planning","c":"Test","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"representation","c":"Test","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"solvers","c":"Test","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"exemples","c":"HouseRepresentation","l":"makeConstraint()"},{"p":"exemples","c":"HouseDataMining","l":"mining()"},{"p":"exemples","c":"HouseRepresentation","l":"murElevee"},{"p":"solvers","c":"NbConstraintsVariableHeuristic","l":"NbConstraintsVariableHeuristic(Set<Constraint>, boolean)","u":"%3Cinit%3E(java.util.Set,boolean)"},{"p":"solvers","c":"RandomValueHeuristic","l":"ordering(Variable, Set<Object>)","u":"ordering(representation.Variable,java.util.Set)"},{"p":"solvers","c":"ValueHeuristic","l":"ordering(Variable, Set<Object>)","u":"ordering(representation.Variable,java.util.Set)"},{"p":"exemples","c":"HouseRepresentation","l":"pieceEau"},{"p":"exemples","c":"HouseRepresentation","l":"pieceNormal"},{"p":"exemples","c":"HouseExample","l":"piecesAutres"},{"p":"exemples","c":"HouseExample","l":"piecesEau"},{"p":"planning","c":"AStarPlanner","l":"plan()"},{"p":"planning","c":"BFSPlanner","l":"plan()"},{"p":"planning","c":"DFSPlanner","l":"plan()"},{"p":"planning","c":"DijkstraPlanner","l":"plan()"},{"p":"planning","c":"Planner","l":"plan()"},{"p":"solvers","c":"DomainSizeVariableHeuristic","l":"plusGrandDomaine"},{"p":"planning","c":"BasicAction","l":"precondition"},{"p":"datamining","c":"Database","l":"propositionalize()"},{"p":"solvers","c":"RandomValueHeuristic","l":"random"},{"p":"solvers","c":"RandomValueHeuristic","l":"RandomValueHeuristic(Random)","u":"%3Cinit%3E(java.util.Random)"},{"p":"exemples","c":"HousePlanification","l":"resolve(String)","u":"resolve(java.lang.String)"},{"p":"solvers","c":"ArcConsistency","l":"revise(Variable, Set<Object>, Variable, Set<Object>)","u":"revise(representation.Variable,java.util.Set,representation.Variable,java.util.Set)"},{"p":"exemples","c":"HouseRepresentation","l":"solHumide"},{"p":"exemples","c":"HousePlanification","l":"solution"},{"p":"exemples","c":"HouseDataMining","l":"solutions"},{"p":"solvers","c":"BacktrackSolver","l":"solve()"},{"p":"solvers","c":"HeuristicMACSolver","l":"solve()"},{"p":"solvers","c":"MACSolver","l":"solve()"},{"p":"solvers","c":"Solver","l":"solve()"},{"p":"solvers","c":"BacktrackSolver","l":"solverec(Map<Variable, Object>, LinkedList<Variable>)","u":"solverec(java.util.Map,java.util.LinkedList)"},{"p":"planning","c":"Action","l":"successor(Map<Variable, Object>)","u":"successor(java.util.Map)"},{"p":"planning","c":"BasicAction","l":"successor(Map<Variable, Object>)","u":"successor(java.util.Map)"},{"p":"datamining","c":"Test","l":"Test()","u":"%3Cinit%3E()"},{"p":"planning","c":"Test","l":"Test()","u":"%3Cinit%3E()"},{"p":"representation","c":"Test","l":"Test()","u":"%3Cinit%3E()"},{"p":"solvers","c":"Test","l":"Test()","u":"%3Cinit%3E()"},{"p":"exemples","c":"HouseRepresentation","l":"toitureTermine"},{"p":"exemples","c":"HouseRepresentation","l":"toString()"},{"p":"planning","c":"BasicAction","l":"toString()"},{"p":"planning","c":"BasicGoal","l":"toString()"},{"p":"representation","c":"Variable","l":"toString()"},{"p":"datamining","c":"BooleanDatabase","l":"transaction"},{"p":"solvers","c":"AbstractSolver","l":"var"},{"p":"solvers","c":"BacktrackSolver","l":"var"},{"p":"representation","c":"Variable","l":"Variable(String, Set<Object>)","u":"%3Cinit%3E(java.lang.String,java.util.Set)"},{"p":"datamining","c":"Database","l":"variables"},{"p":"exemples","c":"HouseSolvers","l":"variables"}];updateSearchResults();